Project title: Shortest paths from a Single Source
Project Description

You need to implement the shortest path algorithms discussed in class. No excellence credits will be awarded for submitting level 1. In level 2, you need to output the number of shortest paths from the source s to each node of the graph. If that problem is not solvable because of a negative (or zero) cycle in the graph, then you need to output such a cycle.

Level 1 (No EC)

Implementation of shortest path algorithms: BFS, Dijkstra's algorithm, DAG shortest paths, and Bellman-Ford algorithm. Write a program that behaves as follows: given a directed graph as input, if the graph has uniform weights (i.e., same positive weights for all edges), then it runs BFS to find shorest paths. Otherwise, if the graph is a directed, acyclic graph (DAG), then it runs DAG shortest paths. Otherwise, if the graph has only nonnegative weights, then it runs Dijkstra's algorithm. If all these test fail, then it runs the Bellman-Ford algorithm. If the graph has negative cycles, then it prints the message "Unable to solve problem. Graph has a negative cycle".


Input specification

A directed graph is given as input, in the format expected by readGraph method. If there is a command line argument, input is read from that file. Otherwise, read input from the console. Assume that the source is vertex 1. Do not process lines in the input after the input graph has been read.
Output specification (Level 1)

In the first line of the output, print the name of the algorithm run (BFS, DAG, Dij, or B-F), the sum of shortest path lengths from s to every node of G that is reachable from s. If |V| is less than or equal to 100, in the next lines, output the lengths of shortest paths from s to each vertex u in the graph that is reachable from s, and the predecessor node of u in that shortest path. If there is no path from s to a vertex, print INF as the length. In the following example, node 8 is not reachable from s, and the output in line 1 is the sum of u.distance for all u for which u.distance != Infinity.


Sample input (level 1):
8 12
1 2 2
1 4 1
2 5 10
2 4 3
5 7 6
3 1 4
3 6 5
4 3 2
7 6 1
4 5 2
4 7 4
4 6 8

Output (level 1):
Dij 20
1 0 -
2 2 1
3 3 4
4 1 1
5 3 4
6 6 7
7 5 4
8 INF -

